name: Lighthouse

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      target_url:
        description: "URL to audit (optional; default: local server)"
        required: false
        type: string

jobs:
  lhci:
    runs-on: ubuntu-latest
    env:
      TARGET_URL: ${{ inputs.target_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build
        env:
          NEXT_PUBLIC_SITE_URL: ${{ vars.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000' }}
          NEXT_PUBLIC_GA_ID: ${{ vars.NEXT_PUBLIC_GA_ID || '' }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ vars.NEXT_PUBLIC_SUPABASE_URL || '' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || '' }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY || '' }}
        run: npm run build

      - name: Start server (only if local)
        if: ${{ !inputs.target_url }}
        run: |
          nohup npm run start -- -p 3000 > .next-start.log 2>&1 &
          for i in {1..60}; do
            if curl -sSf http://localhost:3000 > /dev/null; then echo "Server is up"; break; fi
            echo "Waiting for server..."; sleep 1;
          done

      - name: Run Lighthouse CI (collect)
        run: |
          BASE_URL=${{ inputs.target_url || 'http://localhost:3000' }}
          echo "Collecting URLs for Lighthouse..."
          {
            echo "$BASE_URL/"
            echo "$BASE_URL/en"
            echo "$BASE_URL/en/hotels?sort=cosy-desc"
            echo "$BASE_URL/en/collections"
            echo "$BASE_URL/en/privacy"
            echo "$BASE_URL/shortlists"
          } > urls.txt
          # Attempt to discover 3 hotel detail pages via the public API
          if curl -sf "$BASE_URL/api/hotels" > hotels.json; then
            echo "Discovered hotel slugs:";
            node -e "const BASE=process.env.BASE_URL; const fs=require('fs'); const j=JSON.parse(fs.readFileSync('hotels.json','utf8')); const slugs=(j.results||[]).slice(0,3).map(h=>h.slug); console.log(slugs.join('\n')); fs.writeFileSync('detail-urls.txt', slugs.map(s=>BASE+'/en/hotels/'+s).join('\n'));" \
              --eval BASE_URL=$BASE_URL
            cat detail-urls.txt >> urls.txt || true
          else
            echo "API discovery failed; proceeding with static URLs.";
          fi
          echo "Building lighthouserc.json from urls.txt";
          node -e "const fs=require('fs'); const urls=fs.readFileSync('urls.txt','utf8').trim().split(/\n+/).filter(Boolean); const cfg={ci:{collect:{numberOfRuns:1,url:urls}}}; fs.writeFileSync('lighthouserc.json', JSON.stringify(cfg, null, 2));"
          npx lhci collect --config=./lighthouserc.json

      - name: Assert Lighthouse scores
        run: |
          npx lhci assert --preset=lighthouse:recommended \
            --assert.assertions.categories:performance=warn:0.80 \
            --assert.assertions.categories:accessibility=error:0.90 \
            --assert.assertions.categories:seo=error:0.90

      - name: Upload results to temporary public storage
        run: |
          npx lhci upload --target=temporary-public-storage | tee lhci-upload.log

      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-${{ github.run_number }}
          path: |
            .lighthouseci
            lhci-upload.log
          if-no-files-found: error
